@model Domain.Entities.ConceptViewModel



@{
    ViewBag.HeaderTitleLink = Url.Action("index", "concept");
    ViewBag.HeaderTitle = "Concepto Técnico";
    ViewBag.Title = "Editar Concepto técnico";

    ViewBag.active = "concepts";

}
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@ViewBag.Title</h4>
            </div>

            @using (Ajax.BeginForm("Editar", "Concept", new AjaxOptions { HttpMethod = "POST", OnSuccess = "Showmessage" }, new { @id = "form-registro" }))
            {
                <div class="card-body">


                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.concept_id)
                    @Html.HiddenFor(model => model.draft_law_id)
                    @Html.HiddenFor(model => model.investigator_id)
                    @Html.HiddenFor(model => model.bad_languages)
                    @Html.HiddenFor(model => model.concept_status_id)
                    <div class="row">
                        <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.draft_law_number, htmlAttributes: new { @class = "" })</label>

                        <div class="col-sm-4">

                            <div class="form-group">
                                @Html.EditorFor(model => model.draft_law_number, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                @Html.ValidationMessageFor(model => model.draft_law_number, "", new { @class = "text-danger" })

                            </div>

                        </div>

                        <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.commission_id, htmlAttributes: new { @class = "" })</label>

                        <div class="col-sm-4">

                            <div class="form-group">
                                @Html.DropDownList("commission_id", (IEnumerable<SelectListItem>)ViewBag.commissions, new { @class = "form-control", @disabled = "disabled" })
                                @Html.ValidationMessageFor(model => model.commission_id, "", new { @class = "text-danger" })
                            </div>

                        </div>
                    </div>
                    <div class="form-group has-label">

                        @Html.LabelFor(model => model.title, htmlAttributes: new { @class = "" })
                        @Html.TextAreaFor(model => model.title, new { @class = "form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
                        <span class="text-danger field-validation-error name-error"></span>
                    </div>
                    <div class="form-group has-label">

                        @Html.LabelFor(model => model.summary, htmlAttributes: new { @class = "" })
                        @Html.TextAreaFor(model => model.summary, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.summary, "", new { @class = "text-danger" })
                        <span class="text-danger field-validation-error summary-error"></span>
                    </div>
                    <div class="form-group has-label">


                        @Html.LabelFor(model => model.tags, htmlAttributes: new { @class = "" })

                        @Html.ListBoxFor(model => model.tags, Model.tagsMultiSelectList, new { size = 8, @class = "form-control" })

                        @Html.ValidationMessageFor(model => model.tags, "", new { @class = "text-danger" })
                        <span class="text-danger field-validation-error tags-error"></span>
                    </div>


                    <div class="form-group has-label">

                        @Html.LabelFor(model => model.concept, htmlAttributes: new { @class = "" })

                        @Html.TextAreaFor(model => model.concept, new { @class = "textarea-editor" })
                        @Html.ValidationMessageFor(model => model.concept, "", new { @class = "text-danger" })
                        <span class="text-danger field-validation-error concept-error"></span>
                    </div>



                    <div class="form-group has-label">

                        @Html.LabelFor(model => model.bibliography, htmlAttributes: new { @class = "" })
                        @Html.TextAreaFor(model => model.bibliography, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.bibliography, "", new { @class = "text-danger" })

                    </div>


                </div><!-- end content-->
                <div class="card-footer text-right">


                    <button id="btnCancelar" type="button" class="btn btn-primary">Regresar</button>


                    <input type='button' id="btnCrear" class='btn btn-finish btn-fill btn-primary btn-wd' name='btnCrear' value='Actualizar' />
                </div>
            }
        </div><!--  end card  -->
    </div> <!-- end col-md-12 -->
</div> <!-- end row -->
<!-- Classic Modal -->
<div class="modal fade" id="reject_modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header justify-content-center">

                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    <i class="now-ui-icons ui-1_simple-remove"></i>
                </button>
                <h4 class="title title-up"> Concepto Rechazado</h4>
            </div>
            <div id="modal-body-summary" class="modal-body">
                <div class="form-group has-label">

                    <b>@Html.LabelFor(model => model.reason_reject_id, htmlAttributes: new { @class = "" })</b>

                    <div id="reason_reject"></div>
                    @Html.ValidationMessageFor(model => model.reason_reject_id, "", new { @class = "text-danger" })

                </div>
                <div class="form-group has-label">

                    <b>@Html.LabelFor(model => model.reason_reject_description, htmlAttributes: new { @class = "" })</b>
                    <div id="reason_reject_description" style="width: 100%; height: auto; overflow-y: hidden;overflow-x:hidden">

                    </div>
                    @Html.ValidationMessageFor(model => model.reason_reject_description, "", new { @class = "text-danger" })

                </div>

            </div>

        </div>
    </div>
</div>


@section Scripts {

    <script src="@Url.Content("/assets/js/plugins/summernote/popper.min.js")"></script>
    <script src="@Url.Content("/assets/js/plugins/summernote/summernote-bs4.min.js")"></script>
    <script type="text/javascript" src="/Scripts/summernote-es-ES.js"></script>


    <link href="@Url.Content("/assets/js/plugins/summernote/summernote-bs4.css")" rel="stylesheet" />
    <script type="text/javascript">
        var maximumImageFileSize = 1048576;
        function ValidarTags() {
            $('.tags-error').html('');
            var tags = $('#tags').val();
            if (tags && tags.length > 0)
                return true;
            $('.tags-error').html('Las Palabras Claves son obligatorios.');
            return false;
        }
        function ValidarConcept() {
            $('.concept-error').html('');
            var concept = ConvertirHtmlToText($('#concept').val());
            if (concept && concept.trim() != '')
                return true;
            $('.concept-error').html('El Concepto es obligatorio.');
            return false;
        }

        var concept_id = 0;
        function RedirectVerConcept() {
            window.location.href = "/Concept/Ver/" + concept_id;
        }
        function Showmessage(data) {
            debugger;
            console.log(data);
            concept_id = data.concept_id;
            if (data.status == 1) {
                swal({
                    title: 'Actualizado!',
                    html: 'El concepto se ha actualizado con éxito.',
                    type: 'success',
                    confirmButtonClass: "btn btn-success",
                    buttonsStyling: false,
                    onClose: RedirectVerConcept,
                }).then(function () {
                    RedirectVerConcept();
                }, function (dismiss) { // dismiss can be 'cancel', 'overlay',
                    // 'close', and 'timer'
                    RedirectVerConcept();


                });
            }
            else {
                swal({
                    title: 'Error!',
                    html: data.message_error,
                    type: 'error',
                    confirmButtonClass: "btn btn-success",
                    buttonsStyling: false
                });
            }

        }
         function MostrarRechazo(concept_id) {

             $.ajax(
                    {
                        url: "@Url.Action("ObtenerRechazo", "Concept")",
                        type: "POST",
                        data: { concept_id: concept_id }
                    })
                    .done(function (data) {
                        //alert(1);
                        console.log(data);
                        $('#reason_reject').html(data.reject.reason_reject);
                        $('#reason_reject_description').html(data.reject.reason_reject_description);
                        $("#reject_modal").modal('show');
                    })
                    .fail(function (data) {
                        console.log("error");
                    })
                    .always(function (data) {
                        console.log("complete");
                    });


        }

        function ObtenerNumeroPalabras(text) {
            if (text && text != null) {
                text = text.replace(/\r?\n/g, " ");
                text = text.replace(/[ ]+/g, " ");
                text = text.replace(/^ /, "");
                text = text.replace(/ $/, "");
                var res = text.split(" ");
                return res.length;
            }
            else
                return 0;



        }

        function ValidarImagenes(concept) {

            $('#html_concept').html(concept);

            var imgs = $('#html_concept img');
            console.log(imgs);

            var file_size = 0;
            for (i = 0; i < imgs.length; i++) {
                var img = $(imgs[i]);

                var src = img.attr('src');
                console.log('src', src);
                if (src.includes("data:image")) {
                    var parts = src.split(',');
                    var base64str = parts[1];
                    var decoded = atob(base64str);

                    console.log("FileSize: " + decoded.length);

                    file_size = file_size + decoded.length;
                }



            }

            if (file_size > maximumImageFileSize)
                return false;
            return true;
        }

        function ConvertirHtmlToText(html) {
            var temp = document.createElement("div");
            temp.innerHTML = html;
            return temp.textContent || temp.innerText || "";
        }
        var nro_palabras_resumen = 0;
        ea.addMethod('ValidarResumen', function () {

            nro_palabras_resumen = ObtenerNumeroPalabras($('#summary').val());
            setTimeout(function () {
                var message_error = 'El Resumen tiene ' + nro_palabras_resumen + ' palabras, este campo debe contener máximo 200 palabras.'
                $('#summary').attr("data-val-assertthat", message_error);
                $('#summary-error').html(message_error);
            }, 50);
            return !(nro_palabras_resumen > 200);

        });
        var nro_palabras = 0;
        ea.addMethod('ValidarConcepto', function () {
            debugger;
            var concept = ConvertirHtmlToText($('#concept').val());
            nro_palabras = ObtenerNumeroPalabras(concept);

            setTimeout(function () {
                var message_error = 'El Concepto tiene ' + nro_palabras + ' palabras, este campo debe contener máximo 3000 palabras.'
                $('#concept').attr("data-val-assertthat", message_error);
                $('#concept-error').html(message_error);
            }, 50);
            return !(nro_palabras > 3000);


        });
        function ValidarPalabrasNoAdecuadas(text) {
            var bad_languages = $('#bad_languages').val();
            var bad_languages_list = bad_languages.split(",");

            text = text.toLowerCase();
            var message = "";
            for (i = 0; i < bad_languages_list.length; i++) {
                var bad_language = bad_languages_list[i].toLowerCase();
                if (text.includes(bad_language)) {
                    //list.push(bad_language);
                    message += "<li>" + bad_language + "</li>";
                }
            }
            if (message != "")
                message = "<ul>" + message + "</ul>";
            return message;
        }

        function RedirectMisConceptos() {
            window.location.href = "/Concept";
        }
        $(document).ready(function () {
            // Initialize Editor
            $('.textarea-editor').summernote({

                lang: 'es-ES',
                height: 400, // set editor height
                minHeight: null, // set minimum height of editor
                maxHeight: null, // set maximum height of editor
                focus: false // set focus to editable area after initializing summernote
            });
            $('.textarea-editor').on('summernote.change', function (we, contents, $editable) {
                $("#concept").valid();
            });
            //setTimeout(function () { $('div .note-editable').focus(); }, 5000);
            $("#tags").select2({
                tags: true,
                tokenSeparators: [',']
            });
            debugger;
            var concept_status_id = $('#concept_status_id').val();
            if (concept_status_id == 3) {
                var concept_id = $('#concept_id').val();
                MostrarRechazo(concept_id)
                return;
            }
            if (concept_status_id != 1) {
                $(".card-footer :button").attr("disabled", true);
                swal({
                    title: 'Concepto No Editable !',
                    text: 'El concepto solo puede ser editado cuando esta en estado rechazado.',
                    type: 'error',
                    confirmButtonClass: "btn btn-success",
                    buttonsStyling: false,
                    onClose: RedirectMisConceptos
                }).then(function () {
                    RedirectMisConceptos();
                }).catch(swal.noop);
            }
            $("#reason_reject_id").select2();
        });

        $("#btnCancelar").click(function () {
            window.location.href = "/Concept";
        });

        $("#btnCrear").click(function () {
            //prevent form from submitting
            debugger;

            if (ValidarConcept() & ValidarTags() & $("#form-registro").valid()) {


                var message = ValidarPalabrasNoAdecuadas($('#summary').val());

                if (message != "") {
                    swal({
                        title: 'Error!',
                        html: '<div style="text-align:left;">El Resumen contiene las siguientes palabras no adecuadas:<br>' + message + 'Por favor elimine dichas palabras e intente nuevamente.</div>',
                        type: 'error',
                        confirmButtonClass: "btn btn-success",
                        buttonsStyling: false
                    });

                    return false;
                }
                message = ValidarPalabrasNoAdecuadas($('#bibliography').val());

                if (message != "") {
                    swal({
                        title: 'Error!',
                        html: '<div style="text-align:left;">La bibliografía contiene las siguientes palabras no adecuadas:<br>' + message + 'Por favor elimine dichas palabras e intente nuevamente.</div>',
                        type: 'error',
                        confirmButtonClass: "btn btn-success",
                        buttonsStyling: false
                    });

                    return false;
                }

                message = ValidarPalabrasNoAdecuadas($('#concept').val());

                if (message != "") {
                    swal({
                        title: 'Error!',
                        html: '<div style="text-align:left;">El Concepto contiene las siguientes palabras no adecuadas:<br>' + message + 'Por favor elimine dichas palabras e intente nuevamente.</div>',
                        type: 'error',
                        confirmButtonClass: "btn btn-success",
                        buttonsStyling: false
                    });

                    return false;
                }
                debugger;
                message = ValidarPalabrasNoAdecuadas($('#tags').val().join(' '));

                if (message != "") {
                    swal({
                        title: 'Error!',
                        html: '<div style="text-align:left;">Las Palabras Claves contiene las siguientes palabras no adecuadas:<br>' + message + 'Por favor elimine dichas palabras e intente nuevamente.</div>',
                        type: 'error',
                        confirmButtonClass: "btn btn-success",
                        buttonsStyling: false
                    });

                    return false;
                }

                if (!ValidarImagenes($('#concept').val())) {
                    swal({
                        title: 'Error!',
                        html: '<div style="text-align:left;">El Concepto contiene imagenes mayor al limite permitido(1MB):<br>' + message + 'Por favor elimine algunas imágenes e intente nuevamente.</div>',
                        type: 'error',
                        confirmButtonClass: "btn btn-success",
                        buttonsStyling: false
                    });

                    return false;
                }
              


                swal({
                    title: '¿Estás Seguro de emitir este concepto?',
                    text: "No se podrá revertir!",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonClass: 'btn btn-success',
                    cancelButtonClass: 'btn btn-danger',
                    cancelButtonText: 'Cancelar',
                    confirmButtonText: 'Si, emitir concepto!',
                    buttonsStyling: false
                }).then(function () {

                    $('#form-registro').trigger('submit');

                }).catch(swal.noop);

            }

            return false;
        });

    </script>
}
