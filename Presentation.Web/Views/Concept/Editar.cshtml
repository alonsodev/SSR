@model Domain.Entities.ConceptViewModel



@{
    ViewBag.HeaderTitleLink = Url.Action("index", "concept");
    ViewBag.HeaderTitle = "Concepto Técnico";
    ViewBag.Title = "Ver Concepto técnico";

    ViewBag.active = "concepts";

}
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@ViewBag.Title</h4>
            </div>
            @using (Html.BeginForm("Editar", "Concept", FormMethod.Post, new { id = "form-registro", title = "Editar Concepto" }))
            {
            <div class="card-body">


                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.concept_id)
                @Html.HiddenFor(model => model.draft_law_id)
                @Html.HiddenFor(model => model.investigator_id)
                @Html.HiddenFor(model => model.bad_languages)
                <div class="row">
                    <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.draft_law_number, htmlAttributes: new { @class = "" })</label>

                    <div class="col-sm-4">

                        <div class="form-group">
                            @Html.EditorFor(model => model.draft_law_number, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.draft_law_number, "", new { @class = "text-danger" })

                        </div>

                    </div>

                    <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.commission_id, htmlAttributes: new { @class = "" })</label>

                    <div class="col-sm-4">

                        <div class="form-group">
                            @Html.DropDownList("commission_id", (IEnumerable<SelectListItem>)ViewBag.commissions, new { @class = "form-control", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.commission_id, "", new { @class = "text-danger" })
                        </div>

                    </div>
                </div>
                <div class="form-group has-label">

                    @Html.LabelFor(model => model.title, htmlAttributes: new { @class = "" })
                    @Html.TextAreaFor(model => model.title, new { @class = "form-control", @disabled = "disabled" })
                    @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
                    <span class="text-danger field-validation-error name-error"></span>
                </div>
                <div class="form-group has-label">

                    @Html.LabelFor(model => model.summary, htmlAttributes: new { @class = "" })
                    @Html.TextAreaFor(model => model.summary, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.summary, "", new { @class = "text-danger" })
                    <span class="text-danger field-validation-error name-error"></span>
                </div>
                <div class="form-group has-label">


                    @Html.LabelFor(model => model.tags, htmlAttributes: new { @class = "" })
                    
                    @Html.ListBoxFor(model => model.tags, Model.tagsMultiSelectList, new { size = 8, @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.tags, "", new { @class = "text-danger" })

                </div>


                <div class="form-group has-label">

                    @Html.LabelFor(model => model.concept, htmlAttributes: new { @class = "" })

                    @Html.TextAreaFor(model => model.concept, new { @class = "textarea-editor" })
                    @Html.ValidationMessageFor(model => model.concept, "", new { @class = "text-danger" })
                    <span class="text-danger field-validation-error name-error"></span>
                </div>



                <div class="form-group has-label">

                    @Html.LabelFor(model => model.bibliography, htmlAttributes: new { @class = "" })
                    @Html.TextAreaFor(model => model.bibliography, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.bibliography, "", new { @class = "text-danger" })

                </div>


            </div><!-- end content-->
            <div class="card-footer text-right">


                <button id="btnCancelar" type="button" class="btn btn-primary">Regresar</button>
                <button type="submit" class="btn btn-primary">Actualizar</button>
            </div>
            }
        </div><!--  end card  -->
    </div> <!-- end col-md-12 -->
</div> <!-- end row -->




@section Scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js"></script>
    <!--<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.js"></script>-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.11/summernote-bs4.js"></script>
    <script type="text/javascript" src="/Scripts/summernote-es-ES.js"></script>
    <!--<link href="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.css" rel="stylesheet">-->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.11/summernote-bs4.css" rel="stylesheet">
    <script type="text/javascript">

        function ObtenerNumeroPalabras(text) {
            text = text.replace(/\r?\n/g, " ");
            text = text.replace(/[ ]+/g, " ");
            text = text.replace(/^ /, "");
            text = text.replace(/ $/, "");

            var res = text.split(" ");
            return res.length;
        }
        function ConvertirHtmlToText(html) {
            var temp = document.createElement("div");
            temp.innerHTML = html;
            return temp.textContent || temp.innerText || "";
        }
        var nro_palabras_resumen = 0;
        ea.addMethod('ValidarResumen', function () {

            nro_palabras_resumen = ObtenerNumeroPalabras($('#summary').val());
            setTimeout(function () {
                var message_error = 'El Resumen tiene ' + nro_palabras_resumen + ' palabras, este campo debe contener máximo 200 palabras.'
                $('#summary').attr("data-val-assertthat", message_error);
                $('#summary-error').html(message_error);
            }, 50);
            return !(nro_palabras_resumen > 200);

        });
        var nro_palabras = 0;
        ea.addMethod('ValidarConcepto', function () {

            var concept = ConvertirHtmlToText($('#concept').val());
            nro_palabras = ObtenerNumeroPalabras(concept);

            setTimeout(function () {
                var message_error = 'El Concepto tiene ' + nro_palabras + ' palabras, este campo debe contener máximo 3000 palabras.'
                $('#concept').attr("data-val-assertthat", message_error);
                $('#concept-error').html(message_error);
            }, 50);
            return !(nro_palabras > 3000);


        });
        function ValidarPalabrasNoAdecuadas(text) {
            var bad_languages = $('#bad_languages').val();
            var bad_languages_list = bad_languages.split(",");

            text = text.toLowerCase();
            var message = "";
            for (i = 0; i < bad_languages_list.length; i++) {
                var bad_language = bad_languages_list[i].toLowerCase();
                if (text.includes(bad_language)) {
                    //list.push(bad_language);
                    message += "<li>" + bad_language + "</li>";
                }
            }
            if (message != "")
                message = "<ul>" + message + "</ul>";
            return message;
        }
        $(document).ready(function () {
            // Initialize Editor
            $('.textarea-editor').summernote({

                lang: 'es-ES',
                height: 400, // set editor height
                minHeight: null, // set minimum height of editor
                maxHeight: null, // set maximum height of editor
                focus: false // set focus to editable area after initializing summernote
            });
            $('.textarea-editor').on('summernote.change', function (we, contents, $editable) {
                $("#concept").valid();
            });
            //setTimeout(function () { $('div .note-editable').focus(); }, 5000);
            $("#tags").select2({
                tags: true,
                tokenSeparators: [',']
            });
        });

        $("#btnCancelar").click(function () {
            window.location.href = "/Concept";
        });

        $('#form-registro').on('submit', function (e) { //use on if jQuery 1.7+
            //prevent form from submitting

            e.preventDefault();
            var form = this;

            if ($("#form-registro").valid()) {

                var message = ValidarPalabrasNoAdecuadas($('#summary').val());

                if (message != "") {
                    swal({
                        title: 'Error!',
                        html: '<div style="text-align:left;">El Resumen contiene las siguientes palabras no adecuadas:<br>' + message + 'Por favor elimine dichas palabras e intente nuevamente.</div>',
                        type: 'error',
                        confirmButtonClass: "btn btn-success",
                        buttonsStyling: false
                    });

                    return false;
                }
                message = ValidarPalabrasNoAdecuadas($('#concept').val());

                if (message != "") {
                    swal({
                        title: 'Error!',
                        html: '<div style="text-align:left;">El Concepto contiene las siguientes palabras no adecuadas:<br>' + message + 'Por favor elimine dichas palabras e intente nuevamente.</div>',
                        type: 'error',
                        confirmButtonClass: "btn btn-success",
                        buttonsStyling: false
                    });

                    return false;
                }


                form.submit();




            }

            return false;
        });

    </script>
}
