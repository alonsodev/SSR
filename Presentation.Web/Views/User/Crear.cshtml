@model Domain.Entities.UserViewModel



@{
    ViewBag.HeaderTitleLink = Url.Action("index", "user");
    ViewBag.HeaderTitle = "Usuarios";
    ViewBag.Title = "Crear Usuarios";

    ViewBag.active = "users";

}
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@ViewBag.Title</h4>
            </div>
            @using (Html.BeginForm("Crear", "User", FormMethod.Post, new { id = "form-user", title = "Examinar" }))
            {
                <div class="card-body">


                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div id="kv-avatar-errors-2" class="center-block" style="width:800px;display:none"></div>
                    <div class="row">
                        <div class="col-sm-8 text-center">
                            <div class="kv-avatar">
                                <div class="file-loading">
                                    <input id="avatar-2" name="avatar-2" type="file" required>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group has-label">

                        @Html.LabelFor(model => model.user_name, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.user_name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.user_name, "", new { @class = "text-danger" })

                    </div>
                    <div class="row">
                        <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.document_type_id, htmlAttributes: new { @class = "" })</label>

                        <div class="col-sm-4">

                            <div class="form-group">
                                @Html.DropDownList("document_type_id", (IEnumerable<SelectListItem>)ViewBag.documentTypes, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.document_type_id, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.doc_nro, htmlAttributes: new { @class = "" })</label>

                        <div class="col-sm-4">

                            <div class="form-group">
                                @Html.EditorFor(model => model.doc_nro, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.doc_nro, "", new { @class = "text-danger" })
                            </div>

                        </div>
                    </div>
                    <div class="row">
                        <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.nationality_id, htmlAttributes: new { @class = "" })</label>

                        <div class="col-sm-4">

                            <div class="form-group">
                                @Html.DropDownList("nationality_id", (IEnumerable<SelectListItem>)ViewBag.nationalities, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.nationality_id, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.phone, htmlAttributes: new { @class = "" })</label>

                        <div class="col-sm-4">

                            <div class="form-group">
                                @Html.EditorFor(model => model.phone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })
                            </div>

                        </div>
                    </div>

                    <div class="form-group has-label">

                        @Html.LabelFor(model => model.contact_name, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.contact_name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.contact_name, "", new { @class = "text-danger" })

                    </div>
                    <div class="form-group has-label">

                        @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })

                    </div>
                    <div class="form-group has-label">

                        @Html.LabelFor(model => model.user_email, htmlAttributes: new { @class = "" })
                        @Html.EditorFor(model => model.user_email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.user_email, "", new { @class = "text-danger" })


                        <span class="text-danger field-validation-error email-error"></span>

                    </div>
                    <div class="row">
                        <label class="col-sm-2 col-form-label">  @Html.LabelFor(model => model.user_role_id, htmlAttributes: new { @class = "" })</label>

                        <div class="col-sm-4">

                            <div class="form-group">
                                @Html.DropDownList("user_role_id", (IEnumerable<SelectListItem>)ViewBag.roles, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.user_role_id, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.user_status_id, htmlAttributes: new { @class = "" })</label>

                        <div class="col-sm-4">

                            <div class="form-group">
                                @Html.DropDownList("user_status_id", (IEnumerable<SelectListItem>)ViewBag.estatus, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.user_status_id, "", new { @class = "text-danger" })
                            </div>

                        </div>
                    </div>



                </div><!-- end content-->
                <div class="card-footer text-right">

                    <button id="btnCancelar" type="button" class="btn btn-primary">Regresar</button>
                    <button type="submit" class="btn btn-primary">Crear</button>
                </div>
            }
        </div><!--  end card  -->
    </div> <!-- end col-md-12 -->
</div> <!-- end row -->
<!-- some CSS styling changes and overrides -->
<style>
    .kv-avatar .krajee-default.file-preview-frame, .kv-avatar .krajee-default.file-preview-frame:hover {
        margin: 0;
        padding: 0;
        border: none;
        box-shadow: none;
        text-align: center;
    }

    .kv-avatar {
        display: inline-block;
    }

        .kv-avatar .file-input {
            display: table-cell;
            width: 213px;
        }

    .kv-reqd {
        color: red;
        font-family: monospace;
        font-weight: normal;
    }
</style>

<!-- markup -->
<!-- note: your server code `avatar_upload.php` will receive `$_FILES['avatar']` on form submission -->
<!-- the avatar markup -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/4.4.9/css/fileinput.min.css" media="all" rel="stylesheet" type="text/css" />



@section Scripts {
    <script src="/assets/js/plugins/piexif.min.js" type="text/javascript"></script>
    <!-- sortable.min.js is only needed if you wish to sort / rearrange files in initial preview.
        This must be loaded before fileinput.min.js -->
    <script src="/assets/js/plugins/sortable.min.js" type="text/javascript"></script>
    <!-- purify.min.js is only needed if you wish to purify HTML content in your preview for
        HTML files. This must be loaded before fileinput.min.js -->
    <script src="/assets/js/plugins/purify.min.js" type="text/javascript"></script>
    <!-- popper.min.js below is needed if you use bootstrap 4.x. You can also use the bootstrap js
       3.3.x versions without popper.min.js. -->
    <script src="/assets/js/plugins/popper.min.js"></script>

    <!-- the main fileinput plugin file -->
    <script src="/assets/js/plugins/fileinput.min.js"></script>

    <script src="~/Assets/js/plugins/themes/fileinput/fa/theme.js"></script>
    <script src="~/Assets/js/plugins/themes/fileinput/locales/es.js"></script>
    <!-- optionally if you need translation for your language then include  locale file as mentioned below -->
    
    <script>

        $("#avatar-2").fileinput({
            language: 'es',
            overwriteInitial: true,
            maxFileSize: 1500,
            showClose: false,
            showCaption: false,
            showBrowse: true,
            browseOnZoneClick: true,
            browseLabel: '',
            removeLabel: '',
            browseIcon: '<i class="now-ui-icons arrows-1_share-66"></i>',
            removeIcon: '<i class="now-ui-icons ui-1_simple-remove"></i>',
            uploadIcon: '<i class="now-ui-icons glyphicon-upload"></i>',
            zoomIcon: '<i class="now-ui-icons ui-1_zoom-bold"></i>',
            previewZoomButtonIcons: {
                prev: '<i class="glyphicon glyphicon-triangle-left"></i>',
                next: '<i class="glyphicon glyphicon-triangle-right"></i>',
                toggleheader: '<i class="glyphicon glyphicon-resize-vertical"></i>',
                fullscreen: '<i class="glyphicon glyphicon-fullscreen"></i>',
                borderless: '<i class="glyphicon glyphicon-resize-full"></i>',
                close: '<i class="now-ui-icons ui-1_simple-remove"></i>'
            },

            elErrorContainer: '#kv-avatar-errors-2',
            msgErrorClass: 'alert alert-block alert-danger',
            defaultPreviewContent: '<img src="http://plugins.krajee.com/uploads/default_avatar_male.jpg" alt="Your Avatar">',
            layoutTemplates: { main2: '{preview} {remove} {browse}' },
            allowedFileExtensions: ["jpg", "png", "gif"]
        });
    </script>
    <script type="text/javascript">
        $(function () {
            $("#user_role_id").select2({ theme: "bootstrap" });
            $("#user_status_id").select2({ theme: "bootstrap" });
            $("#nationality_id").select2({ theme: "bootstrap" });
            $("#document_type_id").select2({ theme: "bootstrap" });

        });

        $("#btnCancelar").click(function () {
            window.location.href = "/User";
        });
        $('.email-error').html('');
        $('#form-user').on('submit', function (e) { //use on if jQuery 1.7+
            //prevent form from submitting
            debugger;
            e.preventDefault();
            var form = this;
            if ($("#form-user").valid()) {


                var valido = false;
                $.ajaxSetup({
                    async: false
                });
                 $.ajax({
                        url: "@Url.Action("Verificar", "User")",
                        type: "POST",
                     data: { user_id: 0, email: $('#user_email').val() }
                    })
                    .done(function (data) {
                        valido = data.valido;
                    })
                    .fail(function (data) {
                        console.log("error");
                    })
                    .always(function (data) {
                        console.log("complete");
                    });



                // Volvemos a dejar las llamadas AJAX síncronas
               $.ajaxSetup({
                    async: true
                });

                if (valido) {
                    form.submit();
                }
                else {
                    $('.email-error').html('<span id="name-error" class="">Ya existe un usuario con el mismo correo electrónico.</span>');
                    return false;
                }




            }

            return false;
        });

    </script>
}
