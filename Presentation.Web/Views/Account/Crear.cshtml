@model Domain.Entities.InvestigatorViewModel



@{
    ViewBag.HeaderTitleLink = Url.Action("Crear", "Account");
    ViewBag.HeaderTitle = "Registrar Investigador";
    ViewBag.Title = "Registrar Investigador";

    ViewBag.active = "create_investigator";
    Layout = "~/Views/Shared/_PublicLayout.cshtml";
}
<div class="col-md-12 mr-auto">

    <!--      Wizard container        -->
    <div class="wizard-container">
        <div class="card card-wizard" data-color="primary" id="wizardProfile">
            @using (Ajax.BeginForm("Crear", "Account", new AjaxOptions { HttpMethod = "POST", OnSuccess = "Showmessage" }, new { @id = "form-investigator" }))
            {

                <div class="card-header text-center" data-background-color="orange">
                    <h3 class="card-title">
                        Registrar Investigador
                    </h3>

                    <h3 class="description">
                        Por favor ingrese los datos solicitados
                    </h3>
                    <div class="wizard-navigation">
                        <ul class="nav nav-pills tab-investigator">
                            <li class="nav-item">
                                <a class="nav-link active" href="#politicas" data-toggle="tab" role="tab" aria-controls="politicas" aria-selected="true">
                                    <i class="now-ui-icons users_circle-08"></i>
                                    Políticas de Uso
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#account" data-toggle="tab" data-toggle="tab" role="tab" aria-controls="account" aria-selected="false">
                                    <i class="now-ui-icons ui-1_settings-gear-63"></i>
                                    Datos básicos
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#address4" data-toggle="tab" data-toggle="tab" role="tab" aria-controls="address4" aria-selected="false">
                                    <i class="now-ui-icons ui-1_email-85"></i>
                                    Información de caracterización
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#address2" data-toggle="tab" data-toggle="tab" role="tab" aria-controls="address2" aria-selected="false">
                                    <i class="now-ui-icons ui-1_email-85"></i>
                                    Crear cuenta
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>

                <div class="card-body">
                    <div class="tab-content">
                        <div class="tab-pane show active" id="politicas">
                            <h5 class="info-text"> Políticas de Uso</h5>

                            <div style="width: 100%; height: 250px; overflow-y: scroll;overflow-x:hidden">
                               
                                @Html.Raw(Model.terms_conditions)

                              
                            </div>
                            <div class="form-check mt-3">
                                <label class="form-check-label">
                                    <input id="chkPoliticasUso" class="form-check-input" type="checkbox">
                                    <span class="form-check-sign"></span>
                                    Aceptar
                                </label>
                            </div>
                            <span class="text-danger field-validation-error aceptar-error"></span>
                        </div>
                        <div class="tab-pane fade" id="account">
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="row">
                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.document_type_id, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.DropDownList("document_type_id", (IEnumerable<SelectListItem>)ViewBag.documentTypes, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.document_type_id, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.doc_nro, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.EditorFor(model => model.doc_nro, new { htmlAttributes = new { @class = "form-control", maxlength = "20" } })
                                        @Html.ValidationMessageFor(model => model.doc_nro, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                            </div>
                            <div class="row">
                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.first_name, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.EditorFor(model => model.first_name, new { htmlAttributes = new { @class = "form-control", maxlength = "100" } })
                                        @Html.ValidationMessageFor(model => model.first_name, "", new { @class = "text-danger" })
                                    </div>
                                </div>



                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.second_name, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.EditorFor(model => model.second_name, new { htmlAttributes = new { @class = "form-control", maxlength = "100" } })
                                        @Html.ValidationMessageFor(model => model.second_name, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.last_name, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.EditorFor(model => model.last_name, new { htmlAttributes = new { @class = "form-control", maxlength = "100" } })
                                        @Html.ValidationMessageFor(model => model.last_name, "", new { @class = "text-danger" })
                                    </div>
                                </div>



                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.second_last_name, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.EditorFor(model => model.second_last_name, new { htmlAttributes = new { @class = "form-control", maxlength = "100" } })
                                        @Html.ValidationMessageFor(model => model.second_last_name, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.gender_id, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">

                                        @Html.DropDownList("gender_id", (IEnumerable<SelectListItem>)ViewBag.genders, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.gender_id, "", new { @class = "text-danger" })
                                    </div>
                                </div>



                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.phone, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.EditorFor(model => model.phone, new { htmlAttributes = new { @class = "form-control", maxlength = "20" } })
                                        @Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.mobile_phone, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.EditorFor(model => model.mobile_phone, new { htmlAttributes = new { @class = "form-control", maxlength = "20"} })
                                        @Html.ValidationMessageFor(model => model.mobile_phone, "", new { @class = "text-danger" })
                                    </div>
                                </div>



                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.birthdate_text, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.EditorFor(model => model.birthdate_text, new { htmlAttributes = new { @class = "form-control datepicker" } })
                                        @Html.ValidationMessageFor(model => model.birthdate_text, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.nationality_id, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.DropDownList("nationality_id", (IEnumerable<SelectListItem>)ViewBag.nationalities, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.nationality_id, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.address_country_id, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.DropDownList("address_country_id", (IEnumerable<SelectListItem>)ViewBag.nationalities, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.address_country_id, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                            </div>
                            <div class="row address_department">
                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.department_id, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.DropDownList("department_id", (IEnumerable<SelectListItem>)ViewBag.departments, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.department_id, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.address_municipality_id, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-4">

                                    <div class="form-group">
                                        @Html.DropDownList("address_municipality_id", (IEnumerable<SelectListItem>)ViewBag.municipalities, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.address_municipality_id, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                            </div>
                            <div class="form-group has-label">

                                @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "" })
                                @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control", maxlength = "100" } })
                                @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group has-label">

                                @Html.LabelFor(model => model.educational_institution_id, htmlAttributes: new { @class = "" })
                                @Html.DropDownList("educational_institution_id", (IEnumerable<SelectListItem>)ViewBag.educational_institutions, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.educational_institution_id, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group has-label">

                                @Html.LabelFor(model => model.program_id, htmlAttributes: new { @class = "" })
                                @Html.DropDownList("program_id", (IEnumerable<SelectListItem>)ViewBag.programs, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.educational_institution_id, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group has-label">

                                @Html.LabelFor(model => model.education_level_id, htmlAttributes: new { @class = "" })
                                @Html.DropDownList("education_level_id", (IEnumerable<SelectListItem>)ViewBag.education_levels, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.education_level_id, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group has-label">

                                @Html.LabelFor(model => model.CVLAC, htmlAttributes: new { @class = "" })
                                @Html.EditorFor(model => model.CVLAC, new { htmlAttributes = new { @class = "form-control", maxlength = "500" } })
                                @Html.ValidationMessageFor(model => model.CVLAC, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div class="tab-pane fade" id="address4">
                            <div class="form-group has-label">

                                @Html.LabelFor(model => model.institution_id, htmlAttributes: new { @class = "" })

                                @Html.DropDownList("institution_id", (IEnumerable<SelectListItem>)ViewBag.institutions, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.institution_id, "", new { @class = "text-danger" })

                            </div>
                            <div class="row">
                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.investigation_group_id, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-6">

                                    <div class="form-group">
                                        @Html.DropDownList("investigation_group_id", (IEnumerable<SelectListItem>)ViewBag.investigation_groups, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.investigation_group_id, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <label class="col-sm-2 col-form-label"> @Html.LabelFor(model => model.code_investigation_group, htmlAttributes: new { @class = "" })</label>

                                <div class="col-sm-2">

                                    <div class="form-group">
                                        @Html.EditorFor(model => model.code_investigation_group, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                        @Html.ValidationMessageFor(model => model.code_investigation_group, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                            </div>
                            <div class="form-group has-label">

                                @Html.LabelFor(model => model.commissions, htmlAttributes: new { @class = "" })
                                
                                @Html.ListBoxFor(model => model.commissions, Model.commissionsMultiSelectList, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.commissions, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group has-label">

                                @Html.LabelFor(model => model.interest_areas, htmlAttributes: new { @class = "" })
                                <div>
                                    <span class="text-danger field-validation-error interest-areas-error"></span>
                                </div>
                                <div style="width: 100%; height: 350px; overflow-y: scroll;overflow-x:hidden">
                                    <div class="row">
                                        @foreach (var g in ViewBag.interest_areas)
                                        {
                                            <div class="col-sm-3">
                                                <div class="form-check form-check-inline">
                                                    <label class="form-check-label">
                                                        <input type="checkbox"
                                                               name="interest_areas" value="@g.Value" id="@g.Value" />
                                                        <span class="form-check-sign"></span>
                                                        <label for="@g.Value">@g.Text</label>
                                                    </label>
                                                </div>


                                            </div>
                                        }
                                    </div>
                                </div>


                                @Html.ValidationMessageFor(model => model.interest_areas, "", new { @class = "text-danger" })

                            </div>

                        </div>
                        <div class="tab-pane fade" id="address2">

                            <div class="row">
                                <div class="col-md-4 offset-md-4">


                                    <div class="form-group has-label">

                                        @Html.LabelFor(model => model.user_email, htmlAttributes: new { @class = "" })
                                        @Html.EditorFor(model => model.user_email, new { htmlAttributes = new { @class = "form-control", maxlength = "150" } })
                                        @Html.ValidationMessageFor(model => model.user_email, "", new { @class = "text-danger" })
                                        <span class="text-danger field-validation-error email-error"></span>
                                    </div>

                                    <div class="form-group has-label">

                                        @Html.LabelFor(model => model.user_pass, htmlAttributes: new { @class = "" })
                                        @Html.PasswordFor(model => model.user_pass, new { @class = "form-control", maxlength = "60" })
                                        @Html.ValidationMessageFor(model => model.user_pass, "", new { @class = "text-danger" })

                                    </div>



                                    <div class="form-group has-label">

                                        @Html.LabelFor(model => model.user_pass2, htmlAttributes: new { @class = "" })
                                        @Html.PasswordFor(model => model.user_pass2, new { @class = "form-control", maxlength = "60" })
                                        @Html.ValidationMessageFor(model => model.user_pass2, "", new { @class = "text-danger" })

                                    </div>





                                </div> <!-- end col-md-12 -->
                            </div> <!-- end row -->

                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <div class="pull-right">
                        <input type='button' class='btn btn-next btn-fill btn-primary btn-wd' name='next' value='Siguiente' />
                        <input type='button' id="btnRegistrarse" class='btn btn-finish btn-fill btn-primary btn-wd' name='finish' value='Registrarse' />
                    </div>

                    <div class="pull-left">
                        <input type='button' class='btn btn-previous btn-fill btn-primary btn-wd' name='previous' value='Anterior' />
                    </div>
                    <div class="clearfix"></div>
                </div>

            }
        </div>
    </div>
    <!-- wizard container -->




</div>

@section Scripts {
    <script>
        function Showmessage(data) {
            debugger;
            console.log(data);
            if (data.status == 1) {
                swal({
                    title: 'Registrado!',
                    html: 'La cuenta se ha registrado con exito. Se ha enviado un mensaje a la cuenta de correo proporcionada, con los pasos para activar su cuenta.',
                    type: 'success',
                    confirmButtonClass: "btn btn-success",
                    buttonsStyling: false
                }).then(function () {
                    window.location.href = "/Account/Login";
                }, function (dismiss) { // dismiss can be 'cancel', 'overlay',
                    // 'close', and 'timer'
                    window.location.href = "/Account/Login";


                });
            }
            else {
                swal({
                    title: 'Error!',
                    html: data.message_error,
                    type: 'error',
                    confirmButtonClass: "btn btn-success",
                    buttonsStyling: false
                });
            }

        }
    </script>
    <script type="text/javascript">
        function ValidarAreasInteres() {
            var interest_areas = $("input[name='interest_areas']:checked");
            $('.interest-areas-error').html('');
            if (interest_areas && interest_areas.length > 0)
                return true;
            $('.interest-areas-error').html('Debe seleccionar al menos una Área de interés.');

        }
        var current_tab;
        function ValidarTabActivo(index) {

            if (index > 0) {
                $('.aceptar-error').html('');
                var checked = $('#chkPoliticasUso').prop('checked');

                if (!checked) {
                    $('.aceptar-error').html('Debe aceptar las políticas de uso.');
                    return false;
                }
            }
            if (index > 1) {
               // debugger;
                var valid = $('#document_type_id').valid() & $('#doc_nro').valid() & $('#first_name').valid()
                    & $('#second_name').valid() & $('#last_name').valid() & $('#second_last_name').valid() & $('#gender_id').valid()
                    & $('#phone').valid() & $('#mobile_phone').valid() & $('#birthdate_text').valid() & $('#nationality_id').valid()
                    & $('#address_country_id').valid() & $('#address').valid() & $('#educational_institution_id').valid()
                    & $('#program_id').valid() & $('#education_level_id').valid() & $('#CVLAC').valid();
                if (!valid)
                    return valid;
            }
            if (index > 2) {
                debugger;
                var valid = $('#institution_id').valid() & $('#investigation_group_id').valid()
                    & $('#commissions').valid() & ValidarAreasInteres() ;
                if (!valid)
                return valid;
            }

            if (index > 3) {
                debugger;
                var valid = $('#user_email').valid() & $('#user_pass').valid() & $('#user_pass2').valid();
                if (!valid)
                return valid;
            }

            return true;
        }
        var list_IG = {};
        $(function () {
            demo.initNowUiWizard();
            setTimeout(function () {
                $('.card.card-wizard').addClass('active');
            }, 600);


            $(".address_department").hide();
            $("#educational_institution_id").select2({ theme: "bootstrap" });
            $('#educational_institution_id').on('select2:select', function (e) {
                // Do something

                console.log($("#educational_institution_id").val());
                $('#program_id').empty();
                $('#education_level_id').empty();
                $.ajax({
                    type: 'POST',
                    url: '/Account/ObtenerPrograma',
                    data: {
                        educational_institution_id: $("#educational_institution_id").val()
                    }
                }).then(function (data) {
                    // create the option and append to Select2
                    var i;


                    for (i = 0; i < data.length; i++) {

                        var option = new Option(data[i].Text, data[i].Value, false, false);
                        $("#program_id").append(option).trigger('change');


                    }

                    $("#program_id option:selected").prop("selected", false);
                    // manually trigger the `select2:select` event
                    $("#program_id").trigger({
                        type: 'select2:select',
                        params: {
                            data: data
                        }
                    });
                });


            });

            $("#program_id").select2({ theme: "bootstrap" });

            $('#program_id').on('select2:select', function (e) {
                // Do something

                console.log($("#education_level_id").val());
                $('#education_level_id').empty();

                $.ajax({
                    type: 'POST',
                    url: '/Account/ObtenerNivelFormacion',
                    data: {
                        educational_institution_id: $("#educational_institution_id").val(),
                        program_id: $("#program_id").val()
                    }
                }).then(function (data) {
                    // create the option and append to Select2
                    var i;


                    for (i = 0; i < data.length; i++) {

                        var option = new Option(data[i].Text, data[i].Value, false, false);
                        $("#education_level_id").append(option).trigger('change');


                    }

                    $("#education_level_id option:selected").prop("selected", false);
                    // manually trigger the `select2:select` event
                    $("#education_level_id").trigger({
                        type: 'select2:select',
                        params: {
                            data: data
                        }
                    });
                });


            });

            $("#education_level_id").select2({ theme: "bootstrap" });

            $("#user_role_id").select2({ theme: "bootstrap" });
            $("#user_status_id").select2({ theme: "bootstrap" });
            $("#nationality_id").select2({ theme: "bootstrap" });
            $("#document_type_id").select2({ theme: "bootstrap" });
            $("#gender_id").select2({ theme: "bootstrap" });
            $("#institution_id").select2({
                theme: "bootstrap",
                language: "es",
                ajax: {
                    url: '/Account/ObtenerInstituciones',
                    type: "POST",
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            q: params.term,
                            page: params.page || 1
                        };
                    },
                    processResults: function (data, params) {
                        // parse the results into the format expected by Select2
                        // since we are using custom formatting functions we do not need to
                        // alter the remote JSON data, except to indicate that infinite
                        // scrolling can be used
                        params.page = params.page || 1;

                        return {
                            results: data.items,
                            pagination: {
                                more: (params.page * 10) < data.total_count
                            }
                        };
                    },
                    cache: true
                },
                escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
                minimumInputLength: 0,

            });
            $("#investigation_group_id").select2({ theme: "bootstrap" });

            $("#interest_areas").select2({ theme: "bootstrap" });

            $("#academic_level_id").select2({ theme: "bootstrap" });
            $("#commissions").select2({ theme: "bootstrap" });

            $("#address_country_id").select2({ theme: "bootstrap" });
            $("#department_id").select2({ theme: "bootstrap" });
            $("#address_municipality_id").select2({ theme: "bootstrap" });
            $('.datepicker').datetimepicker({
                locale: 'es',
                format: 'DD/MM/YYYY',
                icons: {
                    time: "now-ui-icons tech_watch-time",
                    date: "now-ui-icons ui-1_calendar-60",
                    up: "fa fa-chevron-up",
                    down: "fa fa-chevron-down",
                    previous: 'now-ui-icons arrows-1_minimal-left',
                    next: 'now-ui-icons arrows-1_minimal-right',
                    today: 'fa fa-screenshot',
                    clear: 'fa fa-trash',
                    close: 'fa fa-remove'
                }
            });
        });
        $("#address_country_id").on('select2:select', function (e) {
            debugger;
            if ($("#address_country_id").val() == "45") {
                $(".address_department").show();
            }

            else {
                $(".address_department").hide();
                $("#department_id").each(function () { //added a each loop here
                    $(this).select2('val', '')
                });
                $("#address_municipality_id").each(function () { //added a each loop here
                    $(this).select2('val', '')
                });
                $('#department_id').val('');
                $('#address_municipality_id').val('');
            }
        });
        $('#institution_id').on('select2:select', function (e) {
            // Do something

            console.log($("#institution_id").val());
            $('#investigation_group_id').empty();
           // $('#interest_areas').empty();
            $.ajax({
                type: 'POST',
                url: '/Account/ObtenerGrupoInvestigacion',
                data: {
                    institution_id: $("#institution_id").val()
                }
            }).then(function (data) {
                // create the option and append to Select2
                var i;
                list_IG = {};
                $("#code_investigation_group").val('');
                for (i = 0; i < data.length; i++) {
                    list_IG[data[i].Value] = data[i];
                    var option = new Option(data[i].Text, data[i].Value, false, false);
                    $("#investigation_group_id").append(option).trigger('change');

                    if (i == 0) {
                        $("#code_investigation_group").val(data[i].AdditionalField);
                    }
                }

                $("#investigation_group_id option:selected").prop("selected", false);
                // manually trigger the `select2:select` event
                $("#investigation_group_id").trigger({
                    type: 'select2:select',
                    params: {
                        data: data
                    }
                });
            });


        });
        $('#investigation_group_id').on('select2:select', function (e) {
            var investigation_group_id= $("#investigation_group_id").val();
            $("#code_investigation_group").val(list_IG[investigation_group_id].AdditionalField);
        });
        $('#department_id').on('select2:select', function (e) {
            // Do something

            console.log($("#department_id").val());
            $('#address_municipality_id').empty();
            $.ajax({
                type: 'POST',
                url: '/Account/ObtenerMunicipalities',
                data: {
                    department_id: $("#department_id").val()
                }
            }).then(function (data) {
                // create the option and append to Select2
                var i;
                for (i = 0; i < data.length; i++) {
                    var option = new Option(data[i].Text, data[i].Value, false, false);
                    $("#address_municipality_id").append(option).trigger('change');
                }


                // manually trigger the `select2:select` event
                $("#address_municipality_id").trigger({
                    type: 'select2:select',
                    params: {
                        data: data
                    }
                });
            });


        });


        $("#btnCancelar").click(function () {
            window.location.href = "/Account/login";
        });
        $('.email-error').html('');
        $("#btnRegistrarse").click(function () {
            //prevent form from submitting
            debugger;


            $('.aceptar-error').html('');
            var checked = $('#chkPoliticasUso').prop('checked')

            if (!checked) {
                $('.aceptar-error').html('Debe aceptar las políticas de uso.');
                return false;
            }
            if ($("#form-investigator").valid()) {


                var valido = false;
                $.ajaxSetup({
                    async: false
                });
                 $.ajax({
                        url: "@Url.Action("Verificar", "User")",
                        type: "POST",
                     data: { user_id: 0, email: $('#user_email').val() }
                    })
                    .done(function (data) {
                        valido = data.valido;
                    })
                    .fail(function (data) {
                        console.log("error");
                    })
                    .always(function (data) {
                        console.log("complete");
                    });



                // Volvemos a dejar las llamadas AJAX síncronas
               $.ajaxSetup({
                    async: true
                });

                if (valido) {
                    //document.getElementById("form-investigator").submit();
                    $('#form-investigator').trigger('submit');
                }
                else {
                    $('.email-error').html('<span id="name-error" class="">Ya existe un usuario con el mismo correo electrónico.</span>');
                    return false;
                }




            }

            return false;
        });

    </script>
}
